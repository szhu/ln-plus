#!/usr/bin/env python

RELATIVE = 'relative'
ABSOLUTE = 'absolute'
USAGE = '''%prog [options] <source_file> <target_file>
       %prog [options] <target_file>
       %prog [options] --target-dir=<target_dir> <source_file> [...]'''


def main():
    from sys import argv
    options, args = parse_options(argv[1:])
    print options
    print args


def symlink(source, target, options):
    from os import symlink
    if options.verbose:
        print '%s -> %s' % (target, source)
    symlink(source, target)


def cmpfiles(file1, file2, options):
    from filecmp import cmp
    result = cmp(file1, file2)
    if options.verbose:
        print 'compare %s and %s: %s' % (file1, file2, ('not identical', 'identical')[result])
    return result


# Stolen from posixpath.py for Python < 2.6
def relpath(path, start):
    """Return a relative version of a path"""

    from os.path import abspath, sep, commonprefix, curdir, pardir, join

    if not path:
        raise ValueError("no path specified")

    start_list = [x for x in abspath(start).split(sep) if x]
    path_list = [x for x in abspath(path).split(sep) if x]

    # Work out how much of the filepath is shared by start and path.
    i = len(commonprefix([start_list, path_list]))

    rel_list = [pardir] * (len(start_list)-i) + path_list[i:]
    if not rel_list:
        return curdir
    return join(*rel_list)


def parse_options(argv):
    from optparse import OptionParser

    parser = OptionParser(usage=USAGE)
    parser.add_option(
        "-v", "--verbose", dest="verbose", action="store_true",
        help="show verbose output"
    )
    parser.add_option(
        "-a", "--absolute", dest="transformation", action="store_const", const=ABSOLUTE,
        help="make source_file absolute"
    )
    parser.add_option(
        "-e", "--relative", dest="transformation", action="store_const", const=RELATIVE,
        help="make source_file relative to target_file"
    )
    parser.add_option(
        "-p", "--make-parents", dest="parents", action="store_true",
        help="make parents of target_file if they don't exist"
    )
    parser.add_option(
        "-u", "--update", dest="update", action="store_true",
        help="if target_file is a symbolic link, remove it before creating the symbolic link"
    )
    parser.add_option(
        "-c", "--convert", "--linkify", dest="linkify", action="store_true",
        help="if target_file is identical to source_file, remove it before creating the symbolic link"
    )
    parser.add_option(
        "-C", "--un-convert", "--un-linkify", dest="unlinkify", action="store_true",
        help="if target_file is a symlink, replace it with a copy of its contents"
    )
    parser.add_option(
        "-w", "--swap", dest="swap", action="store_true",
        help="if target_file exists and source_file does not, move source_file to target_file before creating the symbolic link"
    )
    parser.add_option(
        "-p", "--preserve-metadata", dest="preserve", action="store_true",
        help="when replacing files with symbolic links and vice versa, preserve the permissions and timestamp"
    )
    parser.add_option(
        "--target-dir", dest="target_dir",
        help="put all links in TARGET_DIR"
    )
    options, args = parser.parse_args(argv)
    if len(args) == 0:
        parser.parse_args(['--help'])
    if not options.target_dir and len(args) > 2:
        parser.parse_args(['--help'])
    return options, args


if __name__ == '__main__':
    try:
        exit(main())
    except KeyboardInterrupt, EOFError:
        exit(1)
